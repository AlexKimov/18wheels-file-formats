//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint i;

typedef struct {
  FLOAT U;
  FLOAT V;
} VECTOR_2F;

typedef struct {
  UINT16 X;
  UINT16 Y;
  UINT16 Z;
} VECTOR_3U16;

typedef struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT W;
} VECTOR_4F;

typedef struct {
  UINT Unknown;
} FILE_HEADER;

FILE_HEADER FileHeader <name="File Header">;

UINT ObjectCount;

struct {
  char Name[16];
  UINT FaceCount;
  UINT VertexCount;
  UINT Unknown; // 1
} OBJECT_HEADER[ObjectCount];

BYTE Empty1[448 - ObjectCount * 28];

UINT MorphTargetCount;
UINT AnimationCount;

struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
} U0;

struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
} U1;

struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
} SCALE;

BYTE Unknown[192];

struct {
  UINT FrameCount;
  FLOAT Time;
  FLOAT FrameRate;
  CHAR Name[32];
  UINT Un1;
  UINT Un2; 
} SomeData[AnimationCount];

BYTE Empty2[3328 - AnimationCount * 52];


struct {
  for (i = 0; i < ObjectCount; ++i) {
    struct {
      struct {
        VECTOR_3U16 Indexes[OBJECT_HEADER[i].FaceCount];
      } FACE_INDEXES;
      struct { 
        struct {
          struct {
            UINT16 X;
            UINT16 Y;
            UINT16 Z; 
            UBYTE Index <name="??">; 
          } VERTEX[OBJECT_HEADER[i].VertexCount];
        } MorphTarget[MorphTargetCount] <name="Morph target vertex coordinates", optimize=false>;
      } Vs;
      struct { 
        VECTOR_2F UV[OBJECT_HEADER[i].VertexCount];
      } OBJECT_UV;
    } OBJECT;
  };
} OBJECT_DATA;

struct { 
  for (i = 0; i < AnimationCount; ++i)
    struct {    
      UINT Index[SomeData[i].FrameCount];
      FLOAT Weight[SomeData[i].FrameCount];
    } ANIMATION;
} ANIMATIONS;

